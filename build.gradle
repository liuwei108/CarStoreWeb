buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'

group = 'com.wondercars'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    // compile ("org.springframework.boot:spring-boot-starter-security")
    compile("com.h2database:h2")
    compile("com.braintreepayments.gateway:braintree-java:2.80.0")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}


node {
    version = '8.9.3'
    download = false
    nodeModulesDir = file("frontend")
}
task buildClientDev(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run','buildDev']
}

task buildClient(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side assets for production'
    args = ['run', 'build']
}

task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = 'Builds and watches client asset for rebuilding'
    args = ['run', 'buildWatch']
}

task clientTest(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'verification'
    description = 'Execute client side unit test'
    args = ['run', 'test']
}

bootRun.dependsOn(buildClientDev)

jar.dependsOn(buildClient)